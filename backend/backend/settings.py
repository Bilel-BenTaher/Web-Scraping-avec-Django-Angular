"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from decouple import config
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-30qja07-5)00ha)5-#1kh4ces6!a0g2r%aowlq#rifqj3+h!9u'   #config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'scraper.apps.ScraperConfig',
    'django_filters',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'account.apps.AccountConfig',
    'contact.apps.ContactConfig',
    'newsletter.apps.NewsletterConfig',
    'django_celery_results',
    'django_celery_beat',

]
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5 , # Nombre d'items par page
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # URL Redis pour le broker
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Utiliser la base de données Django pour stocker les résultats
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Tunis'



# CORRECTION MAJEURE: Utilisez les bons noms de tâches
CELERY_BEAT_SCHEDULE = {
    # Citations quotidiennes - CORRIGÉ
    'send-daily-quotes': {
        'task': 'scraper.tasks.envoyer_citations_quotidiennes',  # ✅ Nom correct
        'schedule': crontab(hour=8, minute=0),  # 8:00 AM tous les jours
    },
    
    # Notifications multiples dans la journée - CORRIGÉ
    'send-multiple-quotes': {
        'task': 'scraper.tasks.envoyer_citations_quotidiennes',  # ✅ Nom correct
        'schedule': crontab(hour='8,12,18', minute=00),  # 8h30, 12h30, 18h30
    },
    
    # Scraping quotidien - CORRIGÉ
    'scrape-quotes-daily': {
        'task': 'scraper.tasks.scrape_quotes_task',  # ✅ scraper, pas scraping
        'schedule': crontab(hour=2, minute=0),  # 2h du matin (pas toutes les minutes!)
    },
    
    # Nettoyage des abonnements expirés - CORRIGÉ
    'cleanup-expired-subscriptions': {
        'task': 'scraper.tasks.nettoyer_abonnements_expires',  # ✅ Nom correct
        'schedule': crontab(hour=0, minute=0, day_of_week=0),  # Dimanche minuit
    },
}
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=True)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', cast=bool, default=False)
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@votresite.com')


# Configuration VAPID pour les notifications push
# Générer les clés VAPID : https://web-push-codelab.glitch.me/
VAPID_PUBLIC_KEY = "BHx04BscUtU2PAUl2tlxIXDBFLXM6WZ0C7iF_r9BtH5Ykk2WjDX_L4domczOPqKQzMptMNVDuqZhbs6TwGXAoPk"  
VAPID_PRIVATE_KEY = "Xte1TdFq6owM2Srm6vZjB-l37PIS7RgERKazYi4LJOc"  
VAPID_ADMIN_EMAIL = "bilelbentaher9@gmail.com"  
LOGIN_URL = '/signin/'


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'quotesdb' ,    #config('DB_NAME') , 
        'USER': 'postgres' ,    #config('DB_USER'),
        'PASSWORD': 'DJANGOtest25',   #config('DB_PASSWORD'),
        'HOST':'localhost' ,          #config('DB_HOST'),
        'PORT': '5432'     ,           #config('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr' 
TIME_ZONE = 'Africa/Tunis'
USE_I18N = True
USE_L10N = True
USE_TZ = True  


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
